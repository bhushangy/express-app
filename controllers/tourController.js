const Tour = require('../models/tourModels');

// Code outside request handlers (like the one below) are executed only once, when the application is first
// started on the server. So code outside request handlers are not a part if event loop.
// const tours = JSON.parse(
//   fs.readFileSync(`${__dirname}/../dev-data/data/tours-simple.json`),
// );

exports.aliasTopTours = async (req, res, next) => {
  // Whatever you send as query param is ultimately a string even if you send it as a number is request body.
  // Because it is ultimately added to the url which is a string.
  req.query.limit = '5';
  req.query.sort = '-ratingsAverage,price';
  req.query.fields = 'name,price,ratingsAverage,summary,difficulty';
  next();
};

exports.getAllTours = async (req, res) => {
  try {
    const queryParams = { ...req.query };
    // Remove these params from the object.
    const excludedFields = ['page', 'sort', 'limit', 'fields'];
    excludedFields.forEach((field) => delete queryParams[field]);

    let queryStr = JSON.stringify(queryParams);
    // Replace all occurence of gte, gt... with $gte, $gt...
    queryStr = queryStr.replace(/\b(gte|gt|lte|lt)\b/g, (match) => `$${match}`);

    // If you do not pass any object to find, it will return all the documents in the collection.
    // Build query.
    let query = Tour.find(JSON.parse(queryStr));

    if (req.query.sort) {
      const sortParam = req.query.sort.split(',').join(' ');
      query = query.sort(sortParam);
    } else {
      // If there is no sort param in the api, by deafult sort by this field.
      query = query.sort('-createdAt');
    }

    // Return only these fields in the response.
    if (req.query.fields) {
      const fields = req.query.fields.split(',').join(' ');
      query = query.select(fields);
    } else {
      query = query.select('-__v');
    }

    // Pagination
    const page = +req.query.page || 1;
    const limit = +req.query.limit || 100;
    // Skip these many records. If page is 5 and limit is 10, then it is records 41 - 50.
    // So skip 40 records to display 5th page records.
    const skip = (page - 1) * limit;

    query = query.skip(skip).limit(limit);

    // If user inputs page number that is beyond the number of total documents.
    if (req.query.page) {
      const numTours = await Tour.countDocuments();
      if (skip >= numTours) throw new Error('This page does not exist!!');
    }

    // Execute query.
    const tours = await query;

    // find methods returns an object of type query.
    // find method returns a query object so that you can chain it with more queries.
    // Tour.find().where('duration').equals(5).where('difficulty').equals('easy');

    res.status(200).json({
      // This is coming from middleware. i.e app level middleware.
      requestedTime: req.requestTime,
      status: 'success',
      data: {
        tours,
      },
    });
  } catch (error) {
    res.status(404).json({
      status: 'fail',
      message: error,
    });
  }
};

exports.getTour = async (req, res) => {
  try {
    // This is similar to Tour.findOne({_id: req.params.id})
    // _id is the autogenerated field by mongo in the document
    const tour = await Tour.findById(req.params.id);
    res.status(200).json({
      status: 'success',
      data: {
        tour,
      },
    });
  } catch (error) {
    res.status(404).json({
      status: 'fail',
      message: error,
    });
  }
};

exports.createTour = async (req, res) => {
  try {
    const tour = await Tour.create(req.body);
    res.status(201).json({
      status: 'success',
      data: {
        tour,
      },
    });
  } catch (error) {
    res.status(400).json({
      status: 'fail',
      message: 'Invalid data sent',
    });
  }
};

exports.updateTour = async (req, res) => {
  try {
    const tour = await Tour.findByIdAndUpdate(req.params.id, req.body, {
      new: true, // Return the new updated document
      runValidators: true,
    });
    res.status(200).json({
      status: 'success',
      data: {
        tour,
      },
    });
  } catch (error) {
    res.status(400).json({
      status: 'fail',
      message: 'Invalid data sent',
    });
  }
};

exports.deleteTour = async (req, res) => {
  try {
    await Tour.findByIdAndDelete(req.params.id);
    res.status(204).json({
      status: 'success',
      data: null,
    });
  } catch (error) {
    res.status(400).json({
      status: 'fail',
      message: 'Invalid data sent',
    });
  }
};
