const Tour = require('../models/tourModels');
const ApiFeatures = require('../utils/apiFeatures');
// Code outside request handlers (like the one below) are executed only once, when the application is first
// started on the server. So code outside request handlers are not a part if event loop.
// const tours = JSON.parse(
//   fs.readFileSync(`${__dirname}/../dev-data/data/tours-simple.json`),
// );

exports.aliasTopTours = async (req, res, next) => {
  // Whatever you send as query param is ultimately a string even if you send it as a number is request body.
  // Because it is ultimately added to the url which is a string.
  req.query.limit = '5';
  req.query.sort = '-ratingsAverage,price';
  req.query.fields = 'name,price,ratingsAverage,summary,difficulty';
  next();
};

exports.getAllTours = async (req, res) => {
  try {
    // find method returns an object of type query.
    // find method returns a query object so that you can chain it with more queries.
    // Tour.find().where('duration').equals(5).where('difficulty').equals('easy');
    const features = new ApiFeatures(Tour.find(), req.query)
      .filter()
      .sort()
      .selectFields()
      .pagination();

    // Execute query.
    const tours = await features.query;

    res.status(200).json({
      // This is coming from middleware. i.e app level middleware.
      requestedTime: req.requestTime,
      status: 'success',
      data: {
        tours,
      },
    });
  } catch (error) {
    console.log(error);
    res.status(404).json({
      status: 'fail',
      message: error,
    });
  }
};

exports.getTour = async (req, res) => {
  try {
    // This is similar to Tour.findOne({_id: req.params.id})
    // _id is the autogenerated field by mongo in the document
    const tour = await Tour.findById(req.params.id);
    res.status(200).json({
      status: 'success',
      data: {
        tour,
      },
    });
  } catch (error) {
    res.status(404).json({
      status: 'fail',
      message: error,
    });
  }
};

exports.createTour = async (req, res) => {
  try {
    const tour = await Tour.create(req.body);
    res.status(201).json({
      status: 'success',
      data: {
        tour,
      },
    });
  } catch (error) {
    res.status(400).json({
      status: 'fail',
      message: 'Invalid data sent',
    });
  }
};

exports.updateTour = async (req, res) => {
  try {
    const tour = await Tour.findByIdAndUpdate(req.params.id, req.body, {
      new: true, // Return the new updated document
      runValidators: true,
    });
    res.status(200).json({
      status: 'success',
      data: {
        tour,
      },
    });
  } catch (error) {
    res.status(400).json({
      status: 'fail',
      message: 'Invalid data sent',
    });
  }
};

exports.deleteTour = async (req, res) => {
  try {
    await Tour.findByIdAndDelete(req.params.id);
    res.status(204).json({
      status: 'success',
      data: null,
    });
  } catch (error) {
    res.status(400).json({
      status: 'fail',
      message: 'Invalid data sent',
    });
  }
};
