const Tour = require('../models/tourModels');
const ApiFeatures = require('../utils/apiFeatures');
// Code outside request handlers (like the one below) are executed only once, when the application is first
// started on the server. So code outside request handlers are not a part if event loop.
// const tours = JSON.parse(
//   fs.readFileSync(`${__dirname}/../dev-data/data/tours-simple.json`),
// );

exports.aliasTopTours = async (req, res, next) => {
  // Whatever you send as query param is ultimately a string even if you send it as a number is request body.
  // Because it is ultimately added to the url which is a string.
  req.query.limit = '5';
  req.query.sort = '-ratingsAverage,price';
  req.query.fields = 'name,price,ratingsAverage,summary,difficulty';
  next();
};

exports.getAllTours = async (req, res) => {
  try {
    // find method returns an object of type query.
    // find method returns a query object so that you can chain it with more queries.
    // Tour.find().where('duration').equals(5).where('difficulty').equals('easy');
    const features = new ApiFeatures(Tour.find(), req.query)
      .filter()
      .sort()
      .selectFields()
      .pagination();

    // Execute query.
    const tours = await features.query;

    res.status(200).json({
      // This is coming from middleware. i.e app level middleware.
      requestedTime: req.requestTime,
      status: 'success',
      data: {
        tours,
      },
    });
  } catch (error) {
    console.log(error);
    res.status(404).json({
      status: 'fail',
      message: error,
    });
  }
};

exports.getTour = async (req, res) => {
  try {
    // This is similar to Tour.findOne({_id: req.params.id})
    // _id is the autogenerated field by mongo in the document
    const tour = await Tour.findById(req.params.id);
    res.status(200).json({
      status: 'success',
      data: {
        tour,
      },
    });
  } catch (error) {
    res.status(404).json({
      status: 'fail',
      message: error,
    });
  }
};

exports.createTour = async (req, res) => {
  try {
    const tour = await Tour.create(req.body);
    res.status(201).json({
      status: 'success',
      data: {
        tour,
      },
    });
  } catch (error) {
    res.status(400).json({
      status: 'fail',
      message: error,
    });
  }
};

exports.updateTour = async (req, res) => {
  try {
    const tour = await Tour.findByIdAndUpdate(req.params.id, req.body, {
      new: true, // Return the new updated document
      runValidators: true, // Run all the data validators set up in schema that are run during post
    });
    res.status(200).json({
      status: 'success',
      data: {
        tour,
      },
    });
  } catch (error) {
    res.status(400).json({
      status: 'fail',
      message: 'Invalid data sent',
    });
  }
};

exports.deleteTour = async (req, res) => {
  try {
    await Tour.findByIdAndDelete(req.params.id);
    res.status(204).json({
      status: 'success',
      data: null,
    });
  } catch (error) {
    res.status(400).json({
      status: 'fail',
      message: 'Invalid data sent',
    });
  }
};

exports.getTourStats = async (req, res) => {
  try {
    const stats = await Tour.aggregate([
      // match stage
      {
        $match: {
          ratingsAverage: {
            $gte: 4.7,
          },
        },
      },
      // group stage
      {
        $group: {
          // The _id expression specifies the group key. If you specify an _id value of null,
          // or any other constant value, the $group stage returns a single document that
          // aggregates values across all of the input documents.
          _id: { $toUpper: '$difficulty' },
          num: { $sum: 1 },
          numRatings: { $sum: '$ratingsQuantity' },
          avgRating: { $avg: '$ratingsAverage' },
          avgPrice: { $avg: '$price' },
          minPrice: { $min: '$price' },
          maxPrice: { $max: '$price' },
        },
      },
      {
        $sort: {
          // After stage 2, you cannot use fields of original document.
          // You can only use fields present in document from stage 2.
          avgPrice: 1,
        },
      },
    ]);

    res.status(200).json({
      status: 'success',
      stats,
    });
  } catch (error) {
    console.log(error);
    res.status(400).json({
      status: 'fail',
      message: 'Invalid data sent',
    });
  }
};

exports.getMonthlyPlan = async (req, res) => {
  try {
    const year = +req.params.year;

    const plan = await Tour.aggregate([
      {
        // $unwind creates a document for each value in the startDates array.
        // So you will get the same tour as a separate document with different start dates.
        $unwind: '$startDates',
      },
      {
        $match: {
          startDates: {
            $gte: new Date(`${year}-01-01`),
            $lte: new Date(`${year}-12-31`),
          },
        },
      },
      {
        $group: {
          // $month extracts month from the ISO date.
          _id: { $month: '$startDates' },
          numOfTourStarts: { $sum: 1 },
          // $push creates an array and pushes the name field.
          tours: { $push: '$name' },
        },
      },
      {
        // Add field month with value of field _id to all documents.
        $addFields: { month: '$_id' },
      },
      {
        // Remove field _id from all documents.
        $project: {
          _id: 0,
        },
      },
      {
        // Sort by numOfTourStarts in descending order.
        $sort: { numOfTourStarts: -1 },
      },
      {
        // Limit the number of documents.
        $limit: 12,
      },
    ]);

    res.status(200).json({
      status: 'success',
      plan,
    });
  } catch (error) {
    console.log(error);
    res.status(400).json({
      status: 'fail',
      message: 'Invalid data sent',
    });
  }
};
